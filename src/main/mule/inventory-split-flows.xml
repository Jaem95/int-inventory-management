<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
	xmlns:secure-properties="http://www.mulesoft.org/schema/mule/secure-properties"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/secure-properties http://www.mulesoft.org/schema/mule/secure-properties/current/mule-secure-properties.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd">
	<flow name="scheduler-inventory-flow"
		doc:id="7d01b444-ba54-4cef-9190-f91aa1569a82" initialState="started">
		<scheduler doc:name="Everyday at 4 AM"
			doc:id="120ee053-a6ea-44b3-b27c-a1731cfb7599">
			<scheduling-strategy>
				<cron expression="${inventory-syncronization.scheduler-cron}"
					timeZone="${inventory-syncronization.timezone}" />
			</scheduling-strategy>
		</scheduler>
		<json-logger:logger
			doc:name="PROCESS STARTED FOR  INVENTORY FILE"
			doc:id="f8b9a312-2568-4fb8-b2bb-792efd22b08b"
			message="PROCESS STARTED FOR  INVENTORY FILE" config-ref="JSON_Logger_Config">
			<json-logger:content ><![CDATA[#[""]]]></json-logger:content>
		</json-logger:logger>
		<sftp:read doc:name="Get File from SFTP Server"
			doc:id="36cc4c46-ccef-4027-b68c-265b9e9e75b7"
			path="/inventory/real-scenario/${inventory-syncronization.fixed-file}" config-ref="SFTP_Config"/>
		<flow-ref doc:name="processing-flow"
			doc:id="b0e1e53a-8c18-45f9-93a9-8511f222c21e" name="processing-flow" />
		<sftp:move doc:name="Move Once is Processed"
			doc:id="2d6cb04f-e4c9-4c33-b95d-849778a216de"
			sourcePath="/inventory/real-scenario/${inventory-syncronization.fixed-file}"
			targetPath="${inventory-syncronization.processed-files-path}"
			renameTo='#[correlationId ++ "-" ++ attributes.fileName]' config-ref="SFTP_Config"/>
		<json-logger:logger
			doc:name="THE FILE HAS ENTERED TO THE BACTH PROCESS..... IN THIS MOMENT IS BEING PROCESSED"
			doc:id="a09bae31-e82a-4d46-a6cf-2a496193d0b7"
			message="THE FILE HAS ENTERED TO THE BACTH  PROCESS..... IN THIS MOMENT IS BEING PROCESSED"
			tracePoint="FLOW" config-ref="JSON_Logger_Config">
			<json-logger:content ><![CDATA[#[""]]]></json-logger:content>
		</json-logger:logger>
		<error-handler>
			<on-error-propagate enableNotifications="true"
				logException="false" doc:name="On Error Propagate"
				doc:id="5f36f58e-b930-4101-b4ca-16b8876db147"
				type="SFTP:ILLEGAL_PATH">
				<flow-ref doc:name="error-parse-and-email-sf"
					doc:id="d2377399-bf78-40b5-8580-b39576d74084"
					name="error-parse-and-email-sf" />
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="processing-flow"
		doc:id="f0aaa37a-6eda-44ef-8b09-38f73f63ab8d">
		<ee:transform doc:name="Transform To JSON"
			doc:id="4f10e36a-7840-48d9-903e-3d401ff223b8">
			<ee:message>
				<ee:set-payload resource="dwl-files/handle-inbound-csv.dwl" />
			
</ee:message>
		</ee:transform>
		<batch:job jobName="int-inventory-management-batch-job"
			doc:id="8170928e-6e07-4d00-bd55-12cf2747f41f" maxFailedRecords="-1"
			blockSize="${inventory-syncronization.batch-size}" maxConcurrency="1"
			target="batchResponse">
			<batch:process-records>
				<batch:step name="Discard_Invalid_Records_Step"
					doc:id="65c95e2a-4e2c-4ea2-9fe1-3d9834321d43" acceptPolicy="ALL">
					<validation:is-true
						doc:name="Is a Valid Record?"
						doc:id="159a6479-1ce7-414f-8d40-30a7436067af"
						expression='#[(sizeOf(payload filterObject ((value, key) -&gt; isEmpty(value) or (value == null))) == 0) and (dw::core::Strings::isNumeric(payload.Quantity)) and (payload.Type == "Standard" or payload.Type == "Backorder")]'
						message='#["The following record is invalid, please review that all fields are filled and the sintax is correct:" ++ write(payload, "application/json")]' />
					<batch:aggregator doc:name="Batch Aggregator"
						doc:id="ade49d22-6792-4d6e-9beb-a3c6c303c9c5"
						preserveMimeTypes="true"
						size="${inventory-syncronization.batch-size}">
						<ee:transform doc:name="Group by Store ID"
							doc:id="c8cc13ae-26c0-4587-9bb7-b47d95a8abba">
							<ee:message>
								<ee:set-payload resource="dwl-files/group-by-store-id.dwl" />
							</ee:message>
						</ee:transform>
						<foreach doc:name="For Each"
							doc:id="4ce1a762-153f-4e6c-b5c9-f254c73d7719"
							collection="#[payload]">
							<ee:transform doc:name="Return Payload to CSV"
								doc:id="d027f6a3-5e16-4bfc-89d9-3e68dbff1ef1">
								<ee:message>
									<ee:set-payload><![CDATA[%dw 2.0
import * from dw::Runtime
output application/csv
---
payload[0]]]></ee:set-payload>
								</ee:message>
								<ee:variables>
									<ee:set-variable variableName="fileName"><![CDATA[Mule::p('inventory-syncronization.new-files-path') ++ "/inventory_" ++ payload[0][0].StoreId ++ "_" ++ (now () as String {format: "dd-MM-yyyy"}) ++ ".csv"]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
							<try doc:name="Try"
								doc:id="ed9bbed1-a13e-4988-8760-99aec10eaab1">
								<sftp:write doc:name="Create New Data"
									doc:id="60f3ed04-20b4-4ff5-b99d-da4cb4b1b9d0"
									path="#[vars.fileName]"
									mode="CREATE_NEW" lock="true" config-ref="SFTP_Config"/>
								<error-handler>
									<on-error-continue enableNotifications="true"
										logException="false" doc:name="On Error Continue"
										doc:id="a8014bb5-3054-46af-98e7-f13bb6126320"
										type="SFTP:FILE_ALREADY_EXISTS">
										<ee:transform doc:name="Remove Headers"
											doc:id="6722f8a1-4026-41e2-be37-41b4a40d420d">
											<ee:message>
												<ee:set-payload><![CDATA[%dw 2.0
output application/csv header=false
---
payload]]></ee:set-payload>
											</ee:message>
										</ee:transform>
										<sftp:write doc:name="Append in an Existing File"
											doc:id="9d74bdaf-10c3-4673-a168-f354080ee3a1"
											path="#[vars.fileName]"
											mode="APPEND" lock="true" config-ref="SFTP_Config"/>
									</on-error-continue>
								</error-handler>
							</try>
						</foreach>
					</batch:aggregator>
				</batch:step>
				<batch:step name="Handle_Invalid_Records_Step"
					doc:id="75d6629a-d647-4824-9e5d-443c19188991"
					acceptPolicy="ONLY_FAILURES">
					<batch:aggregator doc:name="Batch Aggregator"
						doc:id="7cdc7491-39ae-4091-92f7-7b36bad035de"
						preserveMimeTypes="true"
						size="${inventory-syncronization.batch-size}">
						<ee:transform doc:name="Collect the Errors"
							doc:id="48a99996-3bd9-45f3-9267-c20b788383f9">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<parse-template
							doc:name="Parse Template For Errors Collected"
							doc:id="775a4713-1dd2-4a09-b5cc-c4505bde22e7"
							location="notifications-html/html-error-collected-errors.html"
							target="emailHtml" />
						<choice doc:name="Choice"
							doc:id="80782af3-1a1e-462a-b963-a2123653f6e2">
							<when
								expression="#[Mule::p('interview-test-flag') == &quot;1&quot;]">
								<email:send doc:name="Send ERROR Email"
									doc:id="88a20cee-e72f-4a88-89a3-58952c12cb05"
									fromAddress="#[Mule::p('smtp.fromEmail')]"
									subject="#[Mule::p('smtp.errorSubject') replace &quot;[muleApp]&quot; with upper(Mule::p('muleApplicationName'))]"
									toAddresses="#[Mule::p('smtp.toEmail') splitBy &quot;,&quot;]" config-ref="Email_SMTP">
									<email:body contentType='#["text/html"]'>
										<email:content><![CDATA[#[(vars.emailHtml default error.detailedDescription  ) default ""]]]></email:content>
									</email:body>
								</email:send>
							</when>
							<otherwise>
								<logger level="DEBUG"
									doc:name="THIS IS NOT AN INTERVIEW TEST, NO SENDING EMAIL TO AVOID RUN OUT OF TRIES"
									doc:id="610108a4-de4c-4ac3-b72d-efaa02a20fd1"
									message="THIS IS NOT AN INTERVIEW TEST, NO SENDING  EMAIL TO AVOID RUN OUT OF TRIES" />
							</otherwise>
						</choice>
					</batch:aggregator>
				</batch:step>
			</batch:process-records>
			<batch:on-complete>
				<json-logger:logger
					doc:name="ENDING BATCH PROCES FOR THE INVENTORY FILE"
					doc:id="f601b166-462d-4f34-bb18-d927be69b782"
					message="ENDING BATCH PROCES FOR THE INVENTORY FILE"
					tracePoint="END" config-ref="JSON_Logger_Config">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</batch:on-complete>
		</batch:job>
	</flow>

</mule>
